# /etc/telegraf.conf

[global_tags]
# Configuration for telegraf agent
[agent]
    interval = "9999ms"
    debug = false
    hostname = "iot-gw"
    round_interval = true
    flush_interval = "12s"
    flush_jitter = "0s"
    collection_jitter = "0s"
    metric_batch_size = 1000
    metric_buffer_limit = 10000
    quiet = false
    logfile = ""
    omit_hostname = false
###############################################################################
#                                  OUTPUTS                                    #
###############################################################################
[[outputs.influxdb]]
    urls = ["http://influx1:8086"]
    database = "telegraf"
timeout = "1s"
    username = "telegraf_w"
    password = "strong_password"
    retention_policy = ""

##############################################################################
#                                MQTT                                        #
#############################################################################
[[outputs.mqtt]]
  ## MQTT Brokers
  ## The list of brokers should only include the hostname or IP address and the
  ## port to the broker. This should follow the format `[{scheme}://]{host}:{port}`. For
  ## example, `localhost:1883` or `mqtt://localhost:1883`.
  ## Scheme can be any of the following: tcp://, mqtt://, tls://, mqtts://
  ## non-TLS and TLS servers can not be mix-and-matched.
  servers = ["mosquitto:1883", ] # or ["mqtts://tls.example.com:1883"]

  ## Protocol can be `3.1.1` or `5`. Default is `3.1.1`
  # procotol = "3.1.1"

  ## MQTT Topic for Producer Messages
  ## MQTT outputs send metrics to this topic format:
  ## <topic_prefix>/<hostname>/<pluginname>/ (e.g. prefix/web01.example.com/mem)
  topic_prefix = "telegrafMQTT"

  ## QoS policy for messages
  ## The mqtt QoS policy for sending messages.
  ## See https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.dev.doc/q029090_.htm
  ##   0 = at most once
  ##   1 = at least once
  ##   2 = exactly once
  # qos = 2

  ## Keep Alive
  ## Defines the maximum length of time that the broker and client may not
  ## communicate. Defaults to 0 which turns the feature off.
  ##
  ## For version v2.0.12 and later mosquitto there is a bug
  ## (see https://github.com/eclipse/mosquitto/issues/2117), which requires
  ## this to be non-zero. As a reference eclipse/paho.mqtt.golang defaults to 30.
  keep_alive = 30

  ## username and password to connect MQTT server.
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  ## client ID
  ## The unique client id to connect MQTT server. If this parameter is not set
  ## then a random ID is generated.
  # client_id = ""

  ## Timeout for write operations. default: 5s
  # timeout = "5s"

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"

  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## When true, metrics will be sent in one MQTT message per flush. Otherwise,
  ## metrics are written one metric per MQTT message.
  # batch = false

  ## When true, metric will have RETAIN flag set, making broker cache entries until someone
  ## actually reads it
  # retain = false

  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
  data_format = "influx"




###############################################################################
#                                  INPUTS                                     #
###############################################################################
[[inputs.cpu]]
    percpu = true
    totalcpu = true
    collect_cpu_time = false
    report_active = false
[[inputs.disk]]
    ignore_fs = ["tmpfs", "devtmpfs", "devfs"]
#[[inputs.io]]
[[inputs.mem]]
[[inputs.net]]
[[inputs.system]]
[[inputs.swap]]
[[inputs.netstat]]
[[inputs.processes]]
[[inputs.kernel]]


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
[[inputs.snmp]]
  ## Agent addresses to retrieve values from.
  agents = ["udp://10.18.3.21:161"]

  ## Timeout for each request.
  timeout = "5s"

  ## SNMP version; can be 1, 2, or 3.
   version = 1

   path = ["/usr/share/snmp/mibs"]
  ## SNMP community string.
   community = "public"

  ## Agent host tag
  # agent_host_tag = "agent_pm"

  ## Number of retries to attempt.
  retries = 3


  [[inputs.snmp.field]]
    oid = "SNMPv2-MIB::sysDescr.0"
    name = "desc"
    is_tag = true
#    conversion = "float(2)"

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::midSerialNumber.0"
    name = "midSerialNumber"
#    conversion = "int"
#    data_format = “value”
#    data_type = “string”"
#    is_tag = true

##### Voltage ######

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::vVan.0"
    name = "vVan"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::vVbn.0"
    name = "vVbn"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::vVcn.0"
    name = "vVcn"

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::vVab.0"
    name = "Measured Line Voltage - Vab"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::vVbc.0"
    name = "Measured Line Voltage - Vbc"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::vVca.0"
    name = "Measured Line Voltage - Vca"


##### LoadCurrent ######

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::lcIa.0"
    name = "Phase A"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::lcIb.0"
    name = "Phase B"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::lcIC.0"
    name = "Phase C"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::lcIn.0"
    name = "Measured Neutral Current"

###### Frequency #######

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::fFrequency.0"
    name = "Measured System Frequency"

###### Power #######

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pActivePa.0"
    name = "Active Power - Phase A"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pActivePb.0"
    name = "Active Power - Phase B"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pActivePc.0"
    name = "Active Power - Phase C"

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pReactivePa.0"
    name = "Reactive Power - Phase A"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pReactivePb.0"
    name = "Reactive Power - Phase B"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pReactivePc.0"
    name = "Reactive Power - Phase C"

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pApparentPa.0"
    name = "Apparent Power - Phase A"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pApparentPb.0"
    name = "Apparent Power - Phase B"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pApparentPc.0"
    name = "Apparent Power - Phase C"

###### PowerFActor######

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pfPfa.0"
#    grok_patterns = ['%{DATA:dato} ']
    name = "Power Factor - Phase A"

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pfPfb.0"
    name = "Power Factor - Phase B"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pfPfc.0"
    name = "Power Factor - Phase C"

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pfPfDisplacementA.0"
    name = "Displacement Power Factor - Phase A"
#
#    pattern = “[0-9]”


  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pfPfDisplacementB.0"
    name = "Displacement Power Factor - Phase B"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pfPfDisplacementC.0"
    name = "Displacement Power Factor - Phase C"

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pfPftot.0"
    name = "Total Power Factor - Phase (A, B, C)"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pfPfDisplacementTotal.0"
    name = "Total Displacement Power Factor - Phase (A, B, C)"


## Totales  Power ####

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pActivePtot.0"
    name = "Total Active Power - Phase (A,B,C)"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pReactivePtot.0"
    name = "Total Reactive Power - Phase (A,B,C)"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::pApparentPtot.0"
    name = "Total Apparent Power - Phase (A,B,C)"

## acumulated Energy ###

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::aeActiveEDelivered.0"
    name = "Accumulated Energy - Active Energy Delivered"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::aeReactiveEDelivered.0"
    name = "Accumulated Energy - Reactive Energy Delivered"
  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::aeApparentEDelivered.0"
    name = "Accumulated Energy - Apparent Energy Delivered"

  [[inputs.snmp.field]]
    oid = "SCHNEIDER-PM5XXX-MIB::aeResetDateTime.0"
    name = "Accumulated Energy - Date /Time of Last Reset"


################
 #  [[inputs.snmp.field]]
 #   oid = "SNMPv2-MIB::sysUpTime.0"
 #   name = "uptime"
 #   conversion = "float(2)"

############################## Transformacion DP01#####################
[[processors.converter]]
    [processors.converter.fields]
      float = ["vVan","vVbn","vVcn","Accumulated Energy - Active Energy Delivered","Accumulated Energy - Apparent Energy Delivered","Accumulated Energy - Reactive Energy Delivered","Active Power - Phase A","Active Power - Phase B","Active Power - Phase C","Apparent Power - Phase A","Apparent Power - Phase B","Apparent Power - Phase C","Measured Line Voltage - Vab","Measured Line Voltage - Vbc","Measured Line Voltage - Vca","Measured Neutral Current","Measured System Frequency","Phase A","Phase B","Phase C","Reactive Power - Phase A","Reactive Power - Phase B","Reactive Power - Phase C","Total Active Power - Phase (A,B,C)","Total Apparent Power - Phase (A,B,C)","Total Reactive Power - Phase (A,B,C)"]



#    [processors.converter.fields]
#      float = ["Total Reactive Power - Phase (A,B,C)"]

###############################################################
#### UPS 01###################3
[[inputs.snmp]]
  ## Agent addresses to retrieve values from.
  agents = ["udp://10.18.3.31:161"]

  ## Timeout for each request.
  timeout = "5s"

  ## SNMP version; can be 1, 2, or 3.
   version = 1

   path = ["/usr/share/snmp/mibs"]
  ## SNMP community string.
   community = "public"

  ## Agent host tag
  # agent_host_tag = "agent_pm"

  ## Number of retries to attempt.
  retries = 3


  [[inputs.snmp.field]]
    oid = "SNMPv2-MIB::sysDescr.0"
    name = "ups01-desc"
    is_tag = true
#    conversion = "float(2)"

####### BATERIA #######

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBatCapacity.0"
    name = "ups01-Battery percent charge"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBatTimeRemaining.0"
    name = "ups01-Battery run time in seconds before UPS to low battery"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBatVoltage.0"
    name = "ups01-Battery voltage as reported by the UPS meters"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsEnvAmbientTemp.0"
    name = "ups01-ambient temperature in the vicinity of the UPS or SNMP agent"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBatCurrent.0"
    name = "ups01-Battery Current as reported"

################Input ups01##################33

  [[inputs.snmp.table]]
    oid = "XUPS-MIB::xupsInputTable"
    name = "ups01-input"
    inherit_tags = ["input-source"]

  [[inputs.snmp.table.field]]
      oid = "XUPS-MIB::xupsInputVoltage.1"
      name = "ups01-f1-The measured input voltage from the UPS meters in volts"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsInputFrequency.0"
    name = "ups01-input frequency in tenths of Hz"

############### Output UPS01######################

  [[inputs.snmp.table]]
    oid = "XUPS-MIB::xupsOutputTable"
    name = "ups01-output"
    inherit_tags = ["output-source"]

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsOutputFrequency.0"
    name = "ups01-output frequency in tenths of Hz"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsOutputLoad.0"
    name = "ups01-output load in percent of rated capacity"

################# ByPass ######################

  [[inputs.snmp.table]]
    oid = "XUPS-MIB::xupsBypassTable"
    name = "ups01-bypass"
    inherit_tags = ["bypass-source"]

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBypassFrequency.0"
    name = "ups01-bypass frequency in tenths of Hz"

################## status ###################

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBatteryAbmStatus.0"
    name = "ups01-status battery"


#### UPS 02################################################################################3
[[inputs.snmp]]
  ## Agent addresses to retrieve values from.
  agents = ["udp://10.18.3.62:161"]

  ## Timeout for each request.
  timeout = "5s"

  ## SNMP version; can be 1, 2, or 3.
   version = 1

   path = ["/usr/share/snmp/mibs"]
  ## SNMP community string.
   community = "lsst_network"

  ## Agent host tag
  # agent_host_tag = "agent_pm"

  ## Number of retries to attempt.
  retries = 3


  [[inputs.snmp.field]]
    oid = "SNMPv2-MIB::sysDescr.0"
    name = "ups01-desc"
    is_tag = true
#    conversion = "float(2)"

####### BATERIA #######

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBatCapacity.0"
    name = "ups02-Battery percent charge"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBatTimeRemaining.0"
    name = "ups02-Battery run time in seconds before UPS to low battery"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBatVoltage.0"
    name = "ups02-Battery voltage as reported by the UPS meters"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsEnvAmbientTemp.0"
    name = "ups02-ambient temperature in the vicinity of the UPS or SNMP agent"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBatCurrent.0"
    name = "ups02-Battery Current as reported"

################Input ups01##################33

  [[inputs.snmp.table]]
    oid = "XUPS-MIB::xupsInputTable"
    name = "ups02-input"
    inherit_tags = ["input2-source"]

    [[inputs.snmp.table.field]]
      oid = "XUPS-MIB::xupsInputVoltage.1"
      name = "ups02-f1-The measured input voltage from the UPS meters in volts"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsInputFrequency.0"
    name = "ups02-input frequency in tenths of Hz"

############### Output UPS01######################

  [[inputs.snmp.table]]
    oid = "XUPS-MIB::xupsOutputTable"
    name = "ups02-output"
    inherit_tags = ["output2-source"]

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsOutputFrequency.0"
    name = "ups02-output frequency in tenths of Hz"

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsOutputLoad.0"
    name = "ups02-output load in percent of rated capacity"

################# ByPass ######################

  [[inputs.snmp.table]]
    oid = "XUPS-MIB::xupsBypassTable"
    name = "ups02-bypass"
    inherit_tags = ["bypass2-source"]

  [[inputs.snmp.field]]
    oid = "XUPS-MIB::xupsBypassFrequency.0"
    name = "ups02-bypass frequency in tenths of Hz"


###############################################################
#                    Input MQTT                               #
###############################################################

[[inputs.mqtt_consumer]]

    servers = [ "mosquitto:1883" ]

    # Topics to subscribe to:
    topics = [
        "#"
    ]

    # Telegraf will also store the topic as a tag with name `topic`
    # NOTE: necessary for the Processor REGEX to extract <Sensor_ID>
    topic_tag = "topic"

    # Connection timeout
    connection_timeout = "30s"

    # Incoming MQTT Payload from Sensor nodes is in InfluxDB Line Protocol strings
    data_format = "influx"
